import { ComponentFixture, TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { ReactiveFormsModule } from '@angular/forms';
import { RouterTestingModule } from '@angular/router/testing';
import { MatCardModule } from '@angular/material/card'; // Import MatCardModule
import { PostFormComponent } from './post-form.component';
import { PostService } from '../../services/post.service';
import { Post } from '../../models/post.model';
import { of, throwError } from 'rxjs';

describe('PostFormComponent', () => {
  let component: PostFormComponent;
  let fixture: ComponentFixture<PostFormComponent>;
  let postService: PostService;
  let httpMock: HttpTestingController;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ PostFormComponent ],
      imports: [
        HttpClientTestingModule,
        ReactiveFormsModule,
        RouterTestingModule,
        MatCardModule // Add MatCardModule here
      ],
      providers: [ PostService ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(PostFormComponent);
    component = fixture.componentInstance;
    postService = TestBed.inject(PostService);
    httpMock = TestBed.inject(HttpTestingController);
    fixture.detectChanges();
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should load post data in edit mode', () => {
    const dummyPost: Post = {
      _id: '1',
      title: 'Test Title',
      content: 'Test Content',
      author: {
        id: 'author1',
        username: 'authorUsername'
      }
    };
    spyOn(postService, 'getPost').and.returnValue(of(dummyPost));

    component.postId = '1';
    component.ngOnInit();

    expect(postService.getPost).toHaveBeenCalledWith('1');
    expect(component.postForm.value).toEqual({
      title: 'Test Title',
      content: 'Test Content'
    });
  });

  it('should create a new post on form submission', () => {
    const dummyPost: Post = {
      _id: '1',
      title: 'Test Title',
      content: 'Test Content',
      author: {
        id: 'author1',
        username: 'authorUsername'
      }
    };
    spyOn(postService, 'createPost').and.returnValue(of(dummyPost));
    spyOn(component['router'], 'navigate');

    component.postForm.setValue({
      title: 'Test Title',
      content: 'Test Content'
    });
    component.onSubmit();

    expect(postService.createPost).toHaveBeenCalledWith({
      _id: '1', // Assuming _id will be generated by the backend
      title: 'Test Title',
      content: 'Test Content',
      author: {
        id: 'author1',
        username: 'authorUsername'
      }
    });
    expect(component['router'].navigate).toHaveBeenCalledWith(['/posts']);
  });

  it('should update an existing post on form submission', () => {
    const dummyPost: Post = {
      _id: '1',
      title: 'Updated Title',
      content: 'Updated Content',
      author: {
        id: 'author1',
        username: 'authorUsername'
      }
    };
    spyOn(postService, 'updatePost').and.returnValue(of(dummyPost));
    spyOn(component['router'], 'navigate');
    component.isEditMode = true;
    component.postId = '1';

    component.postForm.setValue({
      title: 'Updated Title',
      content: 'Updated Content'
    });
    component.onSubmit();

    expect(postService.updatePost).toHaveBeenCalledWith('1', {
      _id: '1',
      title: 'Updated Title',
      content: 'Updated Content',
      author: {
        id: 'author1',
        username: 'authorUsername'
      }
    });
    expect(component['router'].navigate).toHaveBeenCalledWith(['/posts']);
  });

  it('should handle errors when loading post data', () => {
    spyOn(postService, 'getPost').and.returnValue(throwError(() => new Error('Error loading post')));

    component.postId = '1';
    component.ngOnInit();

    expect(component.postForm.value).toEqual({
      title: '',
      content: ''
    });
  });

  it('should handle errors when creating a post', () => {
    spyOn(postService, 'createPost').and.returnValue(throwError(() => new Error('Error creating post')));
    spyOn(console, 'error');

    component.postForm.setValue({ title: 'Error Title', content: 'Error Content' });
    component.onSubmit();

    expect(console.error).toHaveBeenCalledWith('Error creating post', jasmine.any(Error));
  });

  it('should handle errors when updating a post', () => {
    spyOn(postService, 'updatePost').and.returnValue(throwError(() => new Error('Error updating post')));
    spyOn(console, 'error');
    component.isEditMode = true;
    component.postId = '1';

    component.postForm.setValue({ title: 'Error Title', content: 'Error Content' });
    component.onSubmit();

    expect(console.error).toHaveBeenCalledWith('Error updating post', jasmine.any(Error));
  });
});

